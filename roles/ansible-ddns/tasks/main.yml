---
- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
      skip: true
  tags:
    - vars
    - install

- name: Install DDNS
  block:
    - name: include ddns client variables
      include_vars: "{{ ddns_client }}.yml"
      tags:
        - install
        - config
        - start-service

    # - name: Check that client has an install file {{ ddns_client }}
    #   stat:
    #     path: "/tasks/{{ ddns_client}}.yml"
    #   register: install_file
    - name: Run specific steps for client
      ansible.builtin.include_tasks: "tasks/{{ ddns_client}}.yml"
      tags:
        - always
        - install
        - config
      # when: install_file.stat.exists

    - name: Install DUC (NOIP) client
      block:
        - name: Download DUC client
          ansible.builtin.unarchive:
            src: "{{ download_url }}"
            dest: /tmp
            remote_src: yes

        - name: Install package
          apt:
            deb: "/tmp/{{deb_package}}"
            state: present

        - name: Create configuration file
          shell: /usr/bin/noip-duc  --username "{{ ddns_username }}" --password "{{ ddns_password }}" --once

        - name: set to run ddns on boot
          ansible.builtin.systemd:
            name: "{{service_name}}"
            state: started
            enabled: true
          when: ddns_boot_at_start is true

      when: ddns_client == "duc"

    - name: install ddns packages
      package:
        name: "{{ item }}"
        state: present
        use: "{{ package_override | default(omit) }}"
      retries: 5
      with_items:
        - "{{ ddns_packages }}"
      tags:
        - install

    - name: template configuration files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0644') }}"
      with_items:
        - "{{ ddns_config_files }}"
      notify: restart ddns service
      tags:
        - config

    - name: flush handlers
      meta: flush_handlers
      tags:
        - start-service
  when: (ansible_ddns_enabled == true)
