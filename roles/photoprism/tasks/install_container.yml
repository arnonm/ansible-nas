---
- name: Create prism Docker Container
  docker_container:
    name: {{photoprism_container_name}}
    image: photoprism/photoprism:latest
    pull: true
    volumes:
      - "{{ photoprism_config_directory }}:/config:rw"
      - "{{ photoprism_photos_directory }}:/photos:{{ prism_photos_permissions }}"
      # - "~/Import:/photoprism/import"                  # *Optional* base folder from which files can be imported to originals
      - "{{ photoprism_storage }}:/photoprism/storage"                  # *Writable* storage folder for cache, database, and sidecar files (DO NOT REMOVE)
      - "{{traefik_data_directory}}:/data"
    network_mode: "host"
    devices: "{{ photoprism_devices | default(omit) }}"
    env:
      PHOTOPRISM_ADMIN_PASSWORD: "Mashov123"         # YOUR INITIAL ADMIN PASSWORD (MINIMUM 8 CHARACTERS, USERNAME "admin")
      PHOTOPRISM_SITE_URL: "{{photoprism_path}}"             # public server URL incl http:// or https:// and /path, :port is optional
      PHOTOPRISM_ORIGINALS_LIMIT: 5000               # file size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_LOG_LEVEL: "error"                  # log level: trace, debug, info, warning, error, fatal, or panic
      #PHOTOPRISM_PUBLIC: "true"                     # no authentication required (disables password protection)
      PHOTOPRISM_AUTH_MODE: "password"
      PHOTOPRISM_READONLY: "false"                   # do not modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # disables storage permission updates on startup
      PHOTOPRISM_DISABLE_WEBDAV: "false"             # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables settings UI and API
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # disables facial recognition
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification
      PHOTOPRISM_DISABLE_RAW: "false"                # disables indexing and conversion of RAW files
      PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW files (reduces performance)
      PHOTOPRISM_JPEG_QUALITY: 85                    # image quality, a higher value reduces compression (25-100)
      PHOTOPRISM_DETECT_NSFW: "false"                # flag photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "mariadb:3306"     # MariaDB or MySQL database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism"         # MariaDB or MySQL database schema name
      PHOTOPRISM_DATABASE_USER: "photoprism"         # MariaDB or MySQL database user name
      PHOTOPRISM_DATABASE_PASSWORD: "insecure"       # MariaDB or MySQL database user password
      PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
      PHOTOPRISM_SITE_DESCRIPTION: ""                # meta site description
      PHOTOPRISM_SITE_AUTHOR: ""                     # meta site author
      PHOTOPRISM_UID: "{{ photoprism_user_id | default(omit) }}"
      PHOTOPRISM_GID: "{{ photoprism_group_id | default(omit) }}
      TZ: "{{ ansible_nas_timezone }}"
    restart_policy: unless-stopped
    memory: "{{ photoprism_memory }}"
    labels:
      traefik.enable: "{{ photoprism_available_externally | string }}"
      # traefik.http.routers.prism.rule: "Host(`{{ photoprism_hostname }}.{{ ansible_nas_domain }}`)"
      traefik.http.routers.photoprism.rule: "Host(`{{ photoprism_hostname }}`) && PathPrefix(`{{prism_path}}`)"
      traefik.http.routers.prism.tls.certresolver: "letsencrypt"
      # traefik.http.routers.prism.tls.domains[0].main: "{{ ansible_nas_domain }}"
      # traefik.http.routers.prism.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
      traefik.http.services.prism.loadbalancer.server.port: "32400"
    working_dir: "/photoprism" # do not change or remove
    depends_on: maria_db
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    ports:
      - "{{photoprism_port}}:2345" # HTTP port (host:container)

    ## Database Server (recommended)
  ## see https://docs.photoprism.app/getting-started/faq/#should-i-use-sqlite-mariadb-or-mysql
- name: Create mariadb Docker Container
  docker_container:
    name: {{photoprism_db_container_name}}
    image: mariadb:10.8:latest
    pull: true
    restart_policy: unless-stopped
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: mysqld --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    
    ## Never store database files on an unreliable device such as a USB flash drive, an SD card, or a shared network folder:
    volumes:
      - "{{ photoprism_database_dir }}:/var/lib/mysql" # DO NOT REMOVE
    environment:
        MARIADB_AUTO_UPGRADE: "1"
        MARIADB_INITDB_SKIP_TZINFO: "1"
        MARIADB_DATABASE: "{{photoprism_database_name}}"
        MARIADB_USER: "{{photoprism_database_user}}"
        MARIADB_PASSWORD: "{{photoprism_password}}"
        MARIADB_ROOT_PASSWORD: "{{photoprism_root_password}}"

  ## Watchtower upgrades services automatically (optional)
  ## see https://docs.photoprism.app/getting-started/updates/#watchtower
  #
- name: Create watcher Docker Container
  docker_container:
    name: watchtower
    image: containrrr/watchtower
    pull: true
    restart_policy: unless-stopped
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    environment:
        WATCHTOWER_CLEANUP: "{{photoprism_watchtower_cleanup}}"
        WATCHTOWER_POLL_INTERVAL: {{photoprism_watchtower_poll}} # checks for updates every two hours
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:rw"

